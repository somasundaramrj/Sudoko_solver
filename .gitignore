package studyopedia;

public class sodukusolver {
	static int maxterm=9;
	static private boolean isnumberinrow(int[][] board,int number,int row) {
		for(int i=0;i<maxterm;i++) {
			if (board[row][i]==number) {
				
				return false;
			}
			
			
		}
		return true;
		
	}
	static private boolean isnumberincolumn(int[][] board,int number,int column) {
		for(int i =0;i<maxterm;i++) {
			if(board[i][column]==number) {
				return false;
			}
			
		}
		return true;
	}
	static private boolean isnumberinbox(int[][] board,int row,int column,int number) {
		int rows= row-row%3;
		int coulmns=column-column%3;
		for(int i=rows;i<rows+3;i++) {
			for(int j=coulmns;j<coulmns+3;j++) {
				if(board[i][j]==number) {
					return false;
				}
				
			}
			
		}
		return true;
		
		}
	static private boolean isvalidsoduku(int[][] board,int row,int column,int number) {
		if(isnumberinrow(board,number,row)
				&&isnumberincolumn(board,number,column)
				&&isnumberinbox(board,row,column,number)) {
			return true;
		}
		return false;

	}
	static private boolean soduku(int[][] board)
	{
		for(int i=0;i<maxterm;i++) {
			for(int j=0;j<maxterm;j++) {
				if(board[i][j]==0) {
					for(int k=1;k<=maxterm;k++) {
						if (isvalidsoduku(board,i,j,k)) {
							board[i][j]=k;
							if(soduku(board)) {
								return true;
							}else {
							  board[i][j]=0;
							}
						}
						
					}
					return false;
				}
			}
			
		}
		return true;
	}
	
	

	
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] board= {
				{0,8,0,0,0,0,2,0,0},
				{0,0,0,0,8,4,0,9,0},
				{0,0,6,3,2,0,0,1,0},
				{0,9,7,0,0,0,0,8,0},
				{8,0,0,9,0,3,0,0,2},
				{0,1,0,0,0,0,9,5,0},
				{0,7,0,0,4,5,8,0,0},
				{0,3,0,7,1,0,0,0,0},
				{0,0,8,0,0,0,0,4,0}};
		if(soduku(board)) {
			System.out.println("congratulation your program solved this suduko");
			System.out.println();
			System.out.println();
		}else {
			System.out.println("it is not a valid soduku");
		}
		
		for(int i=0;i<maxterm;i++) {
			for(int j=0;j<maxterm;j++) {
				System.out.print(board[i][j]+" ");
			
			if((j+1)%3==0&&j+1!=1&&j+1!=maxterm) {
				System.out.print("|");
			}
			}
			System.out.println();

			if((i+1)%3==0&&i+1!=1&&i+1!=maxterm) {
				System.out.println("-------------------");
				
				
			}
		}
		
	}
}
		
